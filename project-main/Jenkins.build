def webapiImage = ''

pipeline {

  agent {
    label 'agent-vm'
  }

  stages {
    
    stage('Cloning Git') {
      steps {
        git branch: 'main', credentialsId: 'GitHub-Repo-Jules', url: 'https://github.com/JulesDavoust/DevOpsCD.git'
      }
    }

    stage('Building Image') {
      steps {
        script {
          dir('project-main') {
            webapiImage = docker.build("thedevgods/devopsproject:1")
          }
        }
      }
    }

    stage('Publish Image') {
      steps {
        script {
          withDockerRegistry(credentialsId: 'Docker-Credentials') {
            webapiImage.push()
          }
        }
      }
    }

    stage('Deploy to Development') {
      steps {
        script {
          dir('project-main/kubernetes') {
            sh "kubectl apply -f namespace-development.yml"
            sh "kubectl apply -f webapi-deployment.yml -n development"
            sh "kubectl wait --for=condition=available --timeout=300s deployment/devops-prj-backend -n development"
            sh "kubectl get pods -n development"
            sh "kubectl get svc -n development"
          }
        }
      }
    }

    stage('Test in Development') {
      steps {
        script {
          def serviceIp = sh(script: "kubectl get svc backend -n development -o jsonpath='{.spec.clusterIP}'", returnStdout: true).trim()
          echo "Service IP: ${serviceIp}"
          // Test l'endpoint /whoami
          def response = sh(script: "curl -s http://${serviceIp}:9090/whoami", returnStdout: true).trim()
          
          def expectedResponse = '{"Class":"SE1","Students":[{"FirstName":"Vadim","LastName":"BERNARD"},{"FirstName":"Jules","LastName":"DAVOUST"},{"FirstName":"Robin","LastName":"LUCAS"}]}'

          if (response == expectedResponse) {
            echo "Test Passed: Response matches the expected output."
          } else {
            error("Test Failed: Response does not match the expected output.\nResponse: ${response}")
          }
        }
      }
    }

    stage('Deploy to Production') {
      when {
        expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
      }
      steps {
        script {
          dir('project-main/kubernetes') {
            sh "kubectl apply -f namespace-production.yml"
            sh "kubectl apply -f webapi-deployment.yml -n production"
            sh "kubectl wait --for=condition=available --timeout=300s deployment/devops-prj-backend -n production"
            sh "kubectl get pods -n production"
            sh "kubectl get svc -n production"
          }
        }
      }
    }
  }
}
